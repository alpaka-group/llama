name: CI
on:
  push:
  pull_request:
  schedule:
  - cron: '0 3 * * *'

env:
  THREADS: 4
  CONFIG: RelWithDebInfo
  BOOST_ROOT: ${{ github.workspace }}/_boost
  ALPAKA_BRANCH: 0.9.0

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        exclude: './thirdparty'
        extensions: 'cpp,hpp,h,cu'
        clangFormatVersion: 12.0.1

  clang-tidy:
    runs-on: ubuntu-latest
    env:
      CXX: clang++-12
    steps:
    - uses: actions/checkout@v2
    - name: install boost
      run: |
          BOOST_VERSION=1.74.0
          BOOST_ARCHIVE=boost_${BOOST_VERSION//./_}.tar.bz2
          wget -q https://boostorg.jfrog.io/artifactory/main/release/$BOOST_VERSION/source/$BOOST_ARCHIVE
          tar -xf $BOOST_ARCHIVE
          rm $BOOST_ARCHIVE
          mv boost_${BOOST_VERSION//./_} "${BOOST_ROOT}"
    - name: install clang-12
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main'
        sudo apt update
        sudo apt install clang-12 libomp-12-dev clang-tidy-12
    - name: vcpkg install dependencies
      run: |
        vcpkg install catch2 fmt vc tinyobjloader
    - name: install alpaka
      run: |
        git clone https://github.com/alpaka-group/alpaka.git
        mkdir alpaka/build
        cd alpaka/build
        cmake .. -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
        sudo cmake --build . --target install
    - name: run clang-tidy
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=$CONFIG -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON -DALPAKA_ACC_CPU_DISABLE_ATOMIC_REF=ON -DALPAKA_CXX_STANDARD=17 -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
        sed -i 's/\(-forward-unknown-to-host-compiler\|--generate-code=arch=[^ ]\+\|--expt-extended-lambda\|--expt-relaxed-constexpr\|--use_fast_math\)//g' compile_commands.json # remove NVCC specific flags which clang cannot handle
        run-clang-tidy-12 -header-filter='^((?!/thirdparty/).)*$' -extra-arg=--no-cuda-version-check -extra-arg=-nocudalib

  coverage:
    runs-on: ubuntu-latest
    env:
      CXX: g++
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: apt install boost and lcov
      run: |
        sudo apt install libboost-all-dev lcov
    - name: vcpkg install dependencies
      run: |
        vcpkg install catch2 fmt
    - name: cmake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DLLAMA_ENABLE_COVERAGE_FOR_TESTS=ON -DLLAMA_BUILD_EXAMPLES=OFF -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
    - name: build tests
      run: |
        cmake --build build -j $THREADS
    - name: run tests
      run: |
        build/tests
    - name: generate coverage report
      run: |
        lcov --capture --directory build --output-file coverage.info
        #lcov --remove coverage.info '/usr/*' --output-file coverage.info
        #lcov --list coverage.info
    - name: upload coverage report
      run: |
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov

  amalgamation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: clone amalgamate
      uses: actions/checkout@v2
      with:
        repository: shrpnsld/amalgamate
        path: build/amalgamate
    - name: amalgamation
      run: |
        cd include/llama
        ../../build/amalgamate/amalgamate -o ../../build -H -v -a
    - name: upload llama.hpp
      uses: actions/upload-artifact@v2
      with:
        name: llama.hpp
        path: build/llama-amalgamated/llama.hpp

  build-ubuntu:
    runs-on: ubuntu-latest
    env:
      CXX: ${{ matrix.cxx }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: build-ubuntu-gcc9
            cxx: g++-9
          - name: build-ubuntu-gcc9-cuda11.2
            cxx: g++-9
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.2.2/local_installers/cuda_11.2.2_460.32.03_linux.run
          - name: build-ubuntu-gcc9-cuda11.3
            cxx: g++-9
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.3.1/local_installers/cuda_11.3.1_465.19.01_linux.run
          - name: build-ubuntu-gcc9-cuda11.4
            cxx: g++-9
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.4.4/local_installers/cuda_11.4.4_470.82.01_linux.run
          - name: build-ubuntu-gcc10
            cxx: g++-10
          - name: build-ubuntu-gcc11
            cxx: g++-11
            install_extra: g++-11
            add_toolchain_repo: true
          - name: build-ubuntu-gcc11-cuda11.4
            cxx: g++-11
            install_extra: g++-11
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.4.4/local_installers/cuda_11.4.4_470.82.01_linux.run
            add_toolchain_repo: true
          - name: build-ubuntu-gcc11-cuda11.5
            cxx: g++-11
            install_extra: g++-11
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.5.2/local_installers/cuda_11.5.2_495.29.05_linux.run
          - name: build-ubuntu-gcc11-cuda11.6
            cxx: g++-11
            install_extra: g++-11
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.6.1/local_installers/cuda_11.6.1_510.47.03_linux.run
            add_toolchain_repo: true
          - name: build-ubuntu-clang10
            cxx: clang++-10
          - name: build-ubuntu-clang11
            cxx: clang++-11
            install_extra: clang-11
          - name: build-ubuntu-clang12
            cxx: clang++-12
            install_extra: clang-12 libomp-12-dev
            add_llvm_repo: true
          - name: build-ubuntu-clang13
            cxx: clang++-13
            install_extra: clang-13 libomp-13-dev
            add_llvm_repo: true
          - name: build-ubuntu-clang14
            cxx: clang++-14
            install_extra: clang-14 libomp-14-dev
            add_llvm_repo: true
          - name: build-ubuntu-icpx
            cxx: icpx
            install_oneapi: true

    steps:
      - uses: actions/checkout@v2
      - name: add ubuntu toolchain repo
        if: matrix.add_toolchain_repo
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      - name: add LLVM APT repo
        if: matrix.add_llvm_repo
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main'
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main'
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main'
      - name: install OneAPI
        if: matrix.install_oneapi
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
          sudo apt update
          sudo apt install intel-oneapi-compiler-dpcpp-cpp
      - name: install boost
        run: |
          BOOST_VERSION=1.74.0
          BOOST_ARCHIVE=boost_${BOOST_VERSION//./_}.tar.bz2
          wget -q https://boostorg.jfrog.io/artifactory/main/release/$BOOST_VERSION/source/$BOOST_ARCHIVE
          tar -xf $BOOST_ARCHIVE
          rm $BOOST_ARCHIVE
          mv boost_${BOOST_VERSION//./_} "${BOOST_ROOT}"
      - name: install extras
        if: ${{ matrix.install_extra }} 
        run: |
          sudo apt update
          sudo apt install ${{ matrix.install_extra }}
      - name: vcpkg install dependencies
        run: |
          # vcpkg fails to build with Intel compilers
          if [ ${{ matrix.install_oneapi }} ]; then unset CXX; fi
          vcpkg install catch2 fmt vc tinyobjloader
      - name: download CUDA 11
        if: matrix.cuda_url
        run: |
          wget --no-verbose -O cuda_installer.run ${{ matrix.cuda_url }}
      - name: install CUDA 11
        if: matrix.cuda_url
        run: |
          sudo sh cuda_installer.run --silent --toolkit
      - name: install alpaka
        run: |
          if [ ${{ matrix.install_oneapi }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          git clone --branch $ALPAKA_BRANCH --depth 1 https://github.com/alpaka-group/alpaka.git
          mkdir alpaka/build
          cd alpaka/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
          sudo cmake --install .
      - name: cmake
        run: |
          if [ ${{ matrix.install_oneapi }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          mkdir build
          cd build
          CUDACXX=(`echo /usr/local/cuda-*/bin/nvcc`)
          if [ ! -f $CUDACXX ]; then
            unset CUDACXX
          fi
          echo "nvcc is here: $CUDACXX"
          cmake .. -DCMAKE_BUILD_TYPE=$CONFIG -DLLAMA_ENABLE_ASAN_FOR_TESTS=ON -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=${{ !matrix.cuda }} -DALPAKA_ACC_CPU_DISABLE_ATOMIC_REF=ON -DALPAKA_ACC_GPU_CUDA_ENABLE=${{ matrix.cuda }} -DALPAKA_CXX_STANDARD=17 -DCMAKE_CUDA_COMPILER=$CUDACXX -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
      - name: build tests + examples
        run: |
          if [ ${{ matrix.install_oneapi }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          cmake --build build -j $THREADS
      - name: run tests
        run: |
          if [ ${{ matrix.install_oneapi }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          build/tests

  build-windows:
    runs-on: ${{ matrix.runs-on }}
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: build-windows-VS2019
            runs-on: windows-2019
          - name: build-windows-VS2022
            runs-on: windows-2022

    steps:
    - uses: actions/checkout@v2
    - name: install boost
      run: |
        # From: https://github.com/actions/virtual-environments/issues/2667
        $url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.74.0/boost_1_74_0-msvc-14.1-64.exe"
        (New-Object System.Net.WebClient).DownloadFile($url, "$env:TEMP\boost.exe")
        Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=$env:BOOST_ROOT"
    - name: vcpkg install dependencies
      run: |
        vcpkg install catch2 fmt vc tinyobjloader
    - name: install alpaka
      run: |
        git clone https://github.com/alpaka-group/alpaka.git
        mkdir alpaka/build
        cd alpaka/build
        cmake .. "-DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
        cmake --install . --config $env:CONFIG
    - name: cmake
      run: |
        mkdir build
        cd build
        cmake .. -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON "-DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
    - name: build tests + examples
      run: cmake --build build -j $env:THREADS --config $env:CONFIG
    - name: run tests
      run: |
        & build/$env:CONFIG/tests

  build-macos:
    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-10.15
          - os: macos-11
    env:
      CXX: clang++
    steps:
      - uses: actions/checkout@v2
      - name: brew install dependencies
        run: |
          brew install boost libomp
      - name: vcpkg install dependencies
        run: |
          vcpkg install catch2 fmt vc tinyobjloader
      - name: install alpaka
        run: |
          git clone https://github.com/alpaka-group/alpaka.git
          mkdir alpaka/build
          cd alpaka/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
          sudo cmake --build . --target install
      - name: cmake
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=$CONFIG -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON -DALPAKA_CXX_STANDARD=17 -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
      - name: build tests + examples
        run: |
          cmake --build build -j $THREADS
      - name: run tests
        run: |
          build/tests
