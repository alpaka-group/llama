name: CI
on:
  push:
  pull_request:
  schedule:
  - cron: '0 3 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  THREADS: 4
  CONFIG: RelWithDebInfo
  VCPKG_INSTALL: "vcpkg install alpaka fmt tinyobjloader boost-mp11 boost-atomic boost-smart-ptr boost-functional boost-container catch2; until vcpkg install --head xsimd; do echo 'Retrying'; done"

jobs:
  clang-format:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.14
      with:
        exclude: './thirdparty'
        extensions: 'cpp,hpp,h,cu'
        clangFormatVersion: 14

  clang-tidy:
    runs-on: ubuntu-22.04
    env:
      CXX: clang++-14
    steps:
    - uses: actions/checkout@v2
    - name: install clang-14
      run: |
        sudo apt install clang-14 libomp-14-dev clang-tidy-14
    - name: vcpkg install dependencies
      run: |
        eval $VCPKG_INSTALL
    - name: cmake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=$CONFIG \
                 -DBUILD_TESTING=ON \
                 -DLLAMA_BUILD_EXAMPLES=ON \
                 -DCMAKE_BUILD_TYPE=$CONFIG \
                 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                 -Dalpaka_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON \
                 -Dalpaka_ACC_CPU_DISABLE_ATOMIC_REF=ON \
                 -Dalpaka_CXX_STANDARD=17 \
                 -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
    - name: run clang-tidy
      run: |
        cd build
        sed -i 's/\(-forward-unknown-to-host-compiler\|--generate-code=arch=[^ ]\+\|--expt-extended-lambda\|--extended-lambda\|--expt-relaxed-constexpr\|--use_fast_math\)//g' compile_commands.json # remove NVCC specific flags which clang cannot handle
        run-clang-tidy-14 -header-filter='(tests|include/llama|examples)' -extra-arg=--no-cuda-version-check -extra-arg=-nocudalib -extra-arg=-Wno-unused-command-line-argument '^(?!.*'$PWD').*$'

  coverage:
    runs-on: ubuntu-22.04
    env:
      CXX: g++
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: install lcov
      run: |
        sudo apt install lcov
    - name: vcpkg install dependencies
      run: |
        eval $VCPKG_INSTALL
    - name: cmake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
                 -DBUILD_TESTING=ON \
                 -DLLAMA_BUILD_EXAMPLES=OFF \
                 -DLLAMA_ENABLE_COVERAGE_FOR_TESTS=ON \
                 -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
    - name: build tests
      run: |
        cmake --build build -j $THREADS
    - name: run tests
      run: |
        build/tests
    - name: generate coverage report
      run: |
        lcov --capture --directory build --output-file coverage.info
        #lcov --remove coverage.info '/usr/*' --output-file coverage.info
        #lcov --list coverage.info
    - name: upload coverage report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        verbose: true

  amalgamation:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - name: create-single-header.sh
      run: |
        ./tools/create-single-header.sh
    - name: upload llama.hpp
      uses: actions/upload-artifact@v3
      with:
        name: llama.hpp
        path: single-header/llama.hpp
        if-no-files-found: error

  build-ubuntu:
    runs-on: ${{ matrix.os || 'ubuntu-22.04' }}
    env:
      CXX: ${{ matrix.cxx }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: build-ubuntu-gcc9
            cxx: g++-9
          - name: build-ubuntu-gcc10
            cxx: g++-10
          - name: build-ubuntu-gcc10-cuda11.2
            cxx: g++-10
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.2.2/local_installers/cuda_11.2.2_460.32.03_linux.run
          - name: build-ubuntu-gcc10-cuda11.3
            cxx: g++-10
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.3.1/local_installers/cuda_11.3.1_465.19.01_linux.run
          - name: build-ubuntu-gcc10-cuda11.4
            cxx: g++-10
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.4.4/local_installers/cuda_11.4.4_470.82.01_linux.run
          - name: build-ubuntu-gcc10-cuda11.5
            cxx: g++-10
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.5.2/local_installers/cuda_11.5.2_495.29.05_linux.run
          - name: build-ubuntu-gcc10-cuda11.6
            cxx: g++-10
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.6.2/local_installers/cuda_11.6.2_510.47.03_linux.run
          - name: build-ubuntu-gcc11
            cxx: g++-11
          - name: build-ubuntu-gcc11-cuda11.7
            cxx: g++-11
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.7.1/local_installers/cuda_11.7.1_515.65.01_linux.run
          - name: build-ubuntu-gcc11-cuda11.8
            cxx: g++-11
            cuda_url: https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run
          - name: build-ubuntu-gcc12
            cxx: g++-12
            install_extra: g++-12
          - name: build-ubuntu-clang10
            os: ubuntu-20.04 # clang-10 is not available on ubuntu-22.04
            cxx: clang++-10
            install_extra: clang-10 libomp-10-dev
          - name: build-ubuntu-clang11
            cxx: clang++-11
            asan: OFF # ERROR: AddressSanitizer failed to allocate 0x0 (0) bytes of SetAlternateSignalStack (error code: 22)
            install_extra: clang-11 libomp-11-dev
          - name: build-ubuntu-clang12
            cxx: clang++-12
            install_extra: clang-12 libomp-12-dev
          - name: build-ubuntu-clang13
            cxx: clang++-13
            install_extra: clang-13 libomp-13-dev
          - name: build-ubuntu-clang14
            cxx: clang++-14
            install_extra: clang-14 libomp-14-dev
          - name: build-ubuntu-clang15
            cxx: clang++-15
            install_extra: clang-15 libomp-15-dev
            add_llvm_repo: true
          - name: build-ubuntu-icpx
            cxx: icpx
            install_oneapi: true
          - name: build-ubuntu-nvc++
            cxx: /opt/nvidia/hpc_sdk/Linux_x86_64/22.9/compilers/bin/nvc++
            add_nvcpp_repo: true
            install_extra: nvhpc-22-9

    steps:
      - uses: actions/checkout@v2
      - name: add ubuntu toolchain repo
        if: matrix.add_toolchain_ppa
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          sudo apt update
      - name: add LLVM apt repo
        if: matrix.add_llvm_repo
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-12 main'
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-13 main'
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main'
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main'
      - name: add CUDA apt repo
        if: matrix.add_nvcpp_repo
        run: |
          echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
          sudo apt update
      - name: install OneAPI
        if: matrix.install_oneapi
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
          sudo apt update
          sudo apt install intel-oneapi-compiler-dpcpp-cpp
      - name: install extras
        if: ${{ matrix.install_extra }}
        run: |
          sudo apt install ${{ matrix.install_extra }}
      - name: vcpkg install dependencies
        run: |
          # vcpkg fails to build with Intel or nvhpc compilers
          if [ ${{ matrix.install_oneapi }} ] || [ ${{ matrix.add_nvcpp_repo }} ]; then unset CXX; fi
          eval $VCPKG_INSTALL
      - name: download CUDA
        if: matrix.cuda_url
        run: |
          wget --no-verbose -O cuda_installer.run ${{ matrix.cuda_url }}
      - name: install CUDA
        if: matrix.cuda_url
        run: |
          sudo sh cuda_installer.run --silent --toolkit --override
      - name: cmake
        run: |
          if [ ${{ matrix.install_oneapi }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          mkdir build
          cd build

          CUDACXX=(`echo /usr/local/cuda-*/bin/nvcc`)
          if [ ! -f $CUDACXX ]; then
            unset CUDACXX
          fi
          echo "nvcc is here: $CUDACXX"

          NVHPC_FLAGS=
          if [ ${{ matrix.add_nvcpp_repo }} ]; then
            # cmake (in some versions) passes some flags that nvc++ does not understand
            NVHPC_FLAGS='-noswitcherror'
          fi

          cmake .. -DBUILD_TESTING=ON \
                   -DLLAMA_BUILD_EXAMPLES=ON \
                   -DCMAKE_BUILD_TYPE=$CONFIG \
                   -DLLAMA_ENABLE_ASAN_FOR_TESTS=${{ matrix.asan || 'ON' }} \
                   -Dalpaka_ACC_CPU_B_SEQ_T_SEQ_ENABLE=${{ !matrix.cuda_url }} \
                   -Dalpaka_ACC_CPU_DISABLE_ATOMIC_REF=ON \
                   -Dalpaka_ACC_GPU_CUDA_ENABLE=${{ !!matrix.cuda_url }} \
                   -Dalpaka_CXX_STANDARD=17 \
                   -DCMAKE_CUDA_COMPILER=$CUDACXX \
                   -DCMAKE_CUDA_HOST_COMPILER=$CXX \
                   -DCMAKE_CXX_FLAGS=$NVHPC_FLAGS \
                   -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
      - name: build tests + examples
        run: |
          if [ ${{ matrix.install_oneapi }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          cmake --build build -j $THREADS
      - name: run tests
        run: |
          if [ ${{ matrix.install_oneapi }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          build/tests

  build-windows:
    runs-on: ${{ matrix.runs-on }}
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: build-windows-VS2022
            runs-on: windows-2022
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v2
    - name: vcpkg install dependencies
      run: |
        eval $VCPKG_INSTALL
    - name: cmake
      run: |
        mkdir build
        cd build
        cmake .. -DBUILD_TESTING=ON \
                 -DLLAMA_BUILD_EXAMPLES=ON \
                 -Dalpaka_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON \
                 -DCMAKE_TOOLCHAIN_FILE="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"
    - name: build tests + examples
      run: cmake --build build -j $THREADS --config $CONFIG
    - name: run tests
      run: |
        build/$CONFIG/tests

  build-macos:
    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-11
          - os: macos-12
    env:
      CXX: clang++
    steps:
      - uses: actions/checkout@v2
      - name: brew install dependencies
        run: |
          brew install libomp
      - name: vcpkg install dependencies
        run: |
          eval $VCPKG_INSTALL
      - name: cmake
        run: |
          mkdir build
          cd build
          cmake .. -DBUILD_TESTING=ON \
                   -DLLAMA_BUILD_EXAMPLES=ON \
                   -DCMAKE_BUILD_TYPE=$CONFIG \
                   -Dalpaka_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON \
                   -Dalpaka_CXX_STANDARD=17 \
                   -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
      - name: build tests + examples
        run: |
          cmake --build build -j $THREADS
      - name: run tests
        run: |
          build/tests
