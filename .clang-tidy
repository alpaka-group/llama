---
# -bugprone-forward-declaration-namespace # too many false positives in LLAMA
# -cppcoreguidelines-macro-usage # too many macros flagged, which cannot be replaced by constexpr
# -bugprone-exception-escape # bgruber is fine with exceptions escaping main we cannot add main as an exception
# -cppcoreguidelines-pro-type-reinterpret-cast # we need some reinterpret casts in LLAMA
# -readability-misleading-indentation # many false positives because of constexpr if
# -readability-static-accessed-through-instance # flags threadIdx/blockIdx in CUDA code
# -cert-err58-cpp # errors in Catch2
# -fuchsia-statically-constructed-objects # too much noise with Catch2
# -bugprone-easily-swappable-parameters # too noisy
Checks: >
    *,
    -bugprone-exception-escape,
    -bugprone-forward-declaration-namespace,
    -bugprone-easily-swappable-parameters,
    -cert-err58-cpp,
    -cert-msc32-c,
    -cert-msc51-cpp,
    -cppcoreguidelines-avoid-c-arrays,
    -cppcoreguidelines-avoid-magic-numbers,
    -cppcoreguidelines-avoid-non-const-global-variables,
    -cppcoreguidelines-non-private-member-variables-in-classes,
    -cppcoreguidelines-pro-bounds-constant-array-index,
    -cppcoreguidelines-pro-bounds-pointer-arithmetic,
    -cppcoreguidelines-pro-type-reinterpret-cast,
    -fuchsia-default-arguments-calls,
    -fuchsia-default-arguments-declarations,
    -fuchsia-overloaded-operator,
    -fuchsia-trailing-return,
    -google-build-using-namespace,
    -google-readability-braces-around-statements,
    -google-runtime-references,
    -hicpp-avoid-c-arrays,
    -hicpp-braces-around-statements,
    -hicpp-named-parameter,
    -hicpp-uppercase-literal-suffix,
    -llvmlibc-callee-namespace,
    -llvmlibc-implementation-in-namespace,
    -llvmlibc-restrict-system-libc-headers,
    -misc-non-private-member-variables-in-classes,
    -modernize-avoid-c-arrays,
    -modernize-use-nodiscard,
    -openmp-use-default-none,
    -portability-simd-intrinsics,
    -readability-braces-around-statements,
    -readability-magic-numbers,
    -readability-named-parameter,
    -readability-uppercase-literal-suffix,
    -readability-function-cognitive-complexity,
    -readability-static-accessed-through-instance,
    -readability-identifier-length,
    -altera-struct-pack-align,
    -altera-unroll-loops,
    -altera-id-dependent-backward-branch,
    -misc-no-recursion,
    -llvm-header-guard,
    -cppcoreguidelines-macro-usage,
    -fuchsia-statically-constructed-objects,
    -cppcoreguidelines-pro-type-union-access

WarningsAsErrors: '*'
HeaderFilterRegex: ''
AnalyzeTemporaryDtors: false
FormatStyle: none
User: ''
CheckOptions:
  - { key: readability-identifier-naming.ClassCase, value: CamelCase}
  - { key: readability-identifier-naming.EnumCase, value: CamelCase}
  - { key: readability-identifier-naming.StructCase, value: CamelCase}
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE}
#  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase} # bug in C++20: https://bugs.llvm.org/show_bug.cgi?id=46752
  - { key: readability-identifier-naming.TemplateTemplateParameterCase, value: CamelCase}
  - { key: readability-identifier-naming.TypedefCase, value: CamelCase}
#  - { key: readability-identifier-naming.TypeTemplateParameterCase, value: CamelCase} # bug in C++20: https://bugs.llvm.org/show_bug.cgi?id=46752
  - { key: readability-identifier-naming.UnionCase, value: CamelCase}
  - { key: readability-identifier-naming.ValueTemplateParameterCase, value: CamelCase}
